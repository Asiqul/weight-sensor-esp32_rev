#include <Arduino.h>
#include <splash.h>
#include <Keypad.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <HX711.h>

/* DEFINING HX711 PINS */
#define LOADCELL_DOUT_PIN 16
#define LOADCELL_SCK_PIN 4
HX711 scale;
/* DEFINING HX711 PINS END */

/* RELAY and LIMIT SWITCH PINS */
#define RELAY_PIN 23
#define LIMIT_SWITCH_PIN 18
/* RELAY and LIMIT SWITCH PINS END */

/* OLED DISPLAY PARAMETERS */
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
/* OLED DISPLAY PARAMETERS END */

/* KEYPAD SETUP */
const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
    {'1', '4', '7', '*'},
    {'2', '5', '8', '0'},
    {'3', '6', '9', '#'},
    {'A', 'B', 'C', 'D'},
};
byte rowPins[ROWS] = {13, 12, 14, 27};
byte colPins[COLS] = {26, 25, 33, 32};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
/* KEYPAD SETUP END */

/* GLOBAL PARAMETERS */
float calibration_factor = -400;
long zero_offset = 0;
bool machine_state = false;
/* GLOBAL PARAMETERS END */

void setup()
{
  Serial.begin(115200);
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.clearDisplay();
  display.drawBitmap(0, 0, splash, 128, 64, WHITE);
  display.display();

  // HX711 Setup
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor);
  scale.tare();

  // Relay and Limit Switch Setup
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  pinMode(LIMIT_SWITCH_PIN, INPUT_PULLUP);
  delay(2000);

  display.clearDisplay();
  display.setCursor(0, 10);
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.println(F("Press and Hold * to tare!"));
  display.display();
}

void loop()
{
  char key = customKeypad.getKey();
  if (key && key == '*')
  {
    zero_offset = scale.read_average();
    scale.set_offset(zero_offset);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Tare Done, Ready to Start!"));
    display.display();
    delay(2000);
  }

  if (LIMIT_SWITCH_PIN == 0 && !machine_state)
  {
    digitalWrite(RELAY_PIN, HIGH);
    machine_state = true;
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Machine Started!"));
    display.display();
    delay(1000);
  }

  float weight = scale.get_units(15);

  if (weight >= 1000 && machine_state)
  {
    digitalWrite(RELAY_PIN, LOW);
    machine_state = false;
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.println(F("Machine Stopped!"));
    display.display();
    delay(3000);
  }

  while (machine_state)
  {
    weight = scale.get_units(15);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println("Weight Scale");
    display.setTextSize(2);
    display.setCursor(0, 20);
    display.print(weight, 2);
    display.println(" g"); // Display in grams
    display.display();
    Serial.println("machine_state: " + String(machine_state));
  }

  display.clearDisplay();
  display.setCursor(20, 0);
  display.setTextSize(1);
  display.println("Hello Buddy!");
  display.setTextSize(2);
  display.setCursor(25, 25);
  display.println("READY");
  display.display();
  Serial.println(digitalRead(LIMIT_SWITCH_PIN));
  Serial.println("machine_state: " + String(machine_state));
  digitalWrite(RELAY_PIN, HIGH);
  delay(2000);
  digitalWrite(RELAY_PIN, LOW);
  delay(2000);
}
